name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "dev" ]

jobs:
  build:

    runs-on: ubuntu-22.04
    permissions:
      contents: read
      checks: write     # 테스트 결과를 GitHub Checks로 게시하기 위해 필요
      pull-requests: write  # PR에 결과 코멘트 (선택적으로 사용)

    steps:
      - uses: actions/checkout@v4

      # Docker Compose 설치 (Ubuntu 22.04에는 기본 포함, 혹시 모르니 명시)
      - name: Set up Docker Compose
        run: sudo apt-get update && sudo apt-get install -y docker-compose

      # docker-compose up (백그라운드로 실행)
      - name: Start docker-compose services
        run: docker-compose -f docker-compose.local.yml up -d

      # PostgreSQL (PostGIS)/Redis가 완전히 뜰 때까지 대기
      - name: Wait for PostgreSQL (PostGIS) and Redis to be ready
        run: |
          echo "Waiting for PostgreSQL..."
          for i in {1..30}; do
            if docker exec postgres pg_isready -U walkit -d walkit -q; then
              echo "PostgreSQL is up!"
              break
            fi
            if [ "$i" -eq 30 ]; then
              echo "PostgreSQL did not become ready in time" >&2
              exit 1
            fi
            sleep 2
          done
          
          echo "Waiting for Redis..."
          for i in {1..30}; do
            if docker exec redis redis-cli ping | grep -q PONG; then
              echo "Redis is up!"
              break
            fi
            if [ "$i" -eq 30 ]; then
              echo "Redis did not become ready in time" >&2
              exit 1
            fi
            sleep 2
          done

      - name: Restore application yml files
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APP_YML }}" | base64 --decode > src/main/resources/application.yml
          echo "${{ secrets.APP_LOCAL_YML }}" | base64 --decode > src/main/resources/application-local.yml
          echo "${{ secrets.APP_JWT_YML }}" | base64 --decode > src/main/resources/application-jwt.yml
          echo "${{ secrets.APP_OAUTH_YML }}" | base64 --decode > src/main/resources/application-oauth.yml

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
      # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4 # v4.0.0

      - name: Build with Gradle Wrapper
        run: ./gradlew build --no-daemon
        continue-on-error: true

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2.6.1
        if: ${{ always() }}
        with:
          files: build/test-results/**/*.xml
          comment_mode: replace

  dependency-submission:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
      # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
      - name: Generate and submit dependency graph
        uses: gradle/actions/dependency-submission@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
